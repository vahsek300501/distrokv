// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: protos/NodeControlPlane.proto

package controlplane

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NodeControlPlaneService_ReplicateSetRequest_FullMethodName    = "/nodecontrolplane.NodeControlPlaneService/ReplicateSetRequest"
	NodeControlPlaneService_ReplicateDeleteRequest_FullMethodName = "/nodecontrolplane.NodeControlPlaneService/ReplicateDeleteRequest"
)

// NodeControlPlaneServiceClient is the client API for NodeControlPlaneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeControlPlaneServiceClient interface {
	ReplicateSetRequest(ctx context.Context, in *SetReplicationRequest, opts ...grpc.CallOption) (*SetReplicationResponse, error)
	ReplicateDeleteRequest(ctx context.Context, in *DeleteReplicationRequest, opts ...grpc.CallOption) (*DeleteReplicationResponse, error)
}

type nodeControlPlaneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeControlPlaneServiceClient(cc grpc.ClientConnInterface) NodeControlPlaneServiceClient {
	return &nodeControlPlaneServiceClient{cc}
}

func (c *nodeControlPlaneServiceClient) ReplicateSetRequest(ctx context.Context, in *SetReplicationRequest, opts ...grpc.CallOption) (*SetReplicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetReplicationResponse)
	err := c.cc.Invoke(ctx, NodeControlPlaneService_ReplicateSetRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeControlPlaneServiceClient) ReplicateDeleteRequest(ctx context.Context, in *DeleteReplicationRequest, opts ...grpc.CallOption) (*DeleteReplicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteReplicationResponse)
	err := c.cc.Invoke(ctx, NodeControlPlaneService_ReplicateDeleteRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeControlPlaneServiceServer is the server API for NodeControlPlaneService service.
// All implementations must embed UnimplementedNodeControlPlaneServiceServer
// for forward compatibility.
type NodeControlPlaneServiceServer interface {
	ReplicateSetRequest(context.Context, *SetReplicationRequest) (*SetReplicationResponse, error)
	ReplicateDeleteRequest(context.Context, *DeleteReplicationRequest) (*DeleteReplicationResponse, error)
	mustEmbedUnimplementedNodeControlPlaneServiceServer()
}

// UnimplementedNodeControlPlaneServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNodeControlPlaneServiceServer struct{}

func (UnimplementedNodeControlPlaneServiceServer) ReplicateSetRequest(context.Context, *SetReplicationRequest) (*SetReplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicateSetRequest not implemented")
}
func (UnimplementedNodeControlPlaneServiceServer) ReplicateDeleteRequest(context.Context, *DeleteReplicationRequest) (*DeleteReplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicateDeleteRequest not implemented")
}
func (UnimplementedNodeControlPlaneServiceServer) mustEmbedUnimplementedNodeControlPlaneServiceServer() {
}
func (UnimplementedNodeControlPlaneServiceServer) testEmbeddedByValue() {}

// UnsafeNodeControlPlaneServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeControlPlaneServiceServer will
// result in compilation errors.
type UnsafeNodeControlPlaneServiceServer interface {
	mustEmbedUnimplementedNodeControlPlaneServiceServer()
}

func RegisterNodeControlPlaneServiceServer(s grpc.ServiceRegistrar, srv NodeControlPlaneServiceServer) {
	// If the following call pancis, it indicates UnimplementedNodeControlPlaneServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NodeControlPlaneService_ServiceDesc, srv)
}

func _NodeControlPlaneService_ReplicateSetRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetReplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeControlPlaneServiceServer).ReplicateSetRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeControlPlaneService_ReplicateSetRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeControlPlaneServiceServer).ReplicateSetRequest(ctx, req.(*SetReplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeControlPlaneService_ReplicateDeleteRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeControlPlaneServiceServer).ReplicateDeleteRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeControlPlaneService_ReplicateDeleteRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeControlPlaneServiceServer).ReplicateDeleteRequest(ctx, req.(*DeleteReplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeControlPlaneService_ServiceDesc is the grpc.ServiceDesc for NodeControlPlaneService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeControlPlaneService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nodecontrolplane.NodeControlPlaneService",
	HandlerType: (*NodeControlPlaneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReplicateSetRequest",
			Handler:    _NodeControlPlaneService_ReplicateSetRequest_Handler,
		},
		{
			MethodName: "ReplicateDeleteRequest",
			Handler:    _NodeControlPlaneService_ReplicateDeleteRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/NodeControlPlane.proto",
}
